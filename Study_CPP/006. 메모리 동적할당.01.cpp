/*

###################################
   메모리 동적 할당이 필요한 이유
###################################

ex.

// 이름을 입력 받고자 함.

char* func() {

	char name[16] = "";
	cin >> name;

	return name;
}

int main(void) {

	char *pName = func();
	cout << pName <<endl;
}

- 쓰레기 값이 출력된다.
왜냐하면, func() 함수의 지역 변수 name은 함수 호출이 끝나면 메모리가 반환된다.
So, pName 입장에서는 메모리가 반환된 주소를 얻게 되는 셈이니까 쓰레기 값이 대입되게 된다.

그러면 어떻게 해야 하는가?
- 함수 호출이 끝나도 변수가 남아있으면 좋겠음.
- 사용자가 원하는 시점에 소멸할 수 있는 메모리 공간이 필요함.
So, 메모리 동적 할당을 통해 해결한다.

###########################################################################################################

#############################
  메모리 동적 할당의 사용법
#############################

case 1. C 기반의 동적 할당 malloc()

- size_t _Size : Byte 단위로 얼마나 할당할 것인지를 전달
- void* : 모든 자료형의 포인터를 지원하지만, 어떠한 크기의 메모리 공간을 사용할지는 모름. 
		 (형변환을 통해 메모리를 읽는 크기를 정해주면 됨.)

ex. malloc(sizeof(int) * size); // int 형 변수를 size 크기만큼의 공간을 할당.

- 메모리 구조의 Heap 영역에 메모리를 할당 받음.
- 할당 시점 : 사용자가 원할 때, 해당 부분 코드 수행 시
- 소멸 시점 : 사용자가 원할 때, 해당 부분 코드 수행 시

###########
  free() 함수를 이용하여 동적 할당한 메모리 공간을 가리키는 포인터를 넣으면 됨.
###########

메모리를 해제한 메모리 공간을 사용하면 안되는 이유
- 다른 연산에 의해 해당 메모리에 다른 값이 쓰여졌을 수도 있기 때문에.
- 할당 받지 않은 메모리 영역에 접근할 경우 Runtime 오류가 발생할 수 있음.


(Dangling Pointer_ 소실된 공간의 주소를 갖고 있는 포인터)
- 일반 포인터처럼 참조가 가능하지만 프로그램 실행 도중 Crash가 발생할 수 있다.
- 그래서 NULL 포인터로 초기화 해줘야한다.

case 2. C 기반의 동적 할당 calloc()

- size_t _Size : Byte 단위로 얼마나 할당할 것인지를 전달
- size_t _Count : 1 Byte를 몇개 만들지 크기를 전달한다.
- void* : 모든 자료형의 포인터를 지원하지만, 어떠한 크기의 메모리 공간을 사용할지는 모름.
(형변환을 통해 메모리를 읽는 크기를 정해주면 됨.)

ex. calloc(1, 4); // 4 Bytes를 1개 할당.
	calloc(2, 4); // 4 Bytes를 2개 할당.

###########################################################################################################


##########################
  malloc() vs. calloc()
##########################

A. 초기화 유무
malloc() : 쓰레기값으로 메모리 공간 초기화
calloc() : "0"으로 메모리 공간 자동 초기화.

B. 인자 개수
malloc() : 자료형의 크기(원하는 갯수를 얻으려면 곱해서 얻음.)
calloc() : 갯수, 자료형의 크기


// 동적 할당으로 배열을 만들어 문자열을 입력 받는 함수.

char* func() {

	char pName = (char *)malloc(sizeof(char) * 16);
	cin >> pName;

	return pName;
}

###########################################################################################################

과제.

textRPG 만들기 !!!!


*/


#include <iostream>

using std::cout;
using std::endl;

int main(void) {


	cout << "#####################################################################" << endl;
	cout << "### 메모리 동적 할당_ malloc()" << endl << endl;


	// Ctrl + Shift + Space를 치면 매개변수를 보여줌.

	// 메모리 동적 할당 - 메모리 구조의 Heap 영역에 해당 크기만큼의 메모리 공간을 할당 해줌.
	int size1 = 3;

	int *ptr1 = (int *)malloc(sizeof(int) * size1); // malloc() 함수는 (void *)형 포인터를 반환하기 때문에 형변환이 필요함.

	cout << "ptr1: " << ptr1 << endl;
	cout << "*ptr1: " << *ptr1 << endl << endl; // 쓰레기값으로 자동 초기화.

	free(ptr1); // Heap 영역에 동적 할당된 메모리 공간을 소멸 시킴.
	//ptr1 = NULL; // 동적 할당한 메모리를 소멸시킨 후에 NULL로 초기화

	cout << "ptr1: " << ptr1 << endl; // 메모리 주소는 남아있고, (Dangling Pointer_ 소실된 공간의 주소를 갖고 있는 포인터)
	cout << "*ptr1: " << *ptr1 << endl << endl; // 그 메모리 주소의 들어있는 값은 쓰레기값으로...

	cout << "#####################################################################" << endl;
	cout << "### 메모리 동적 할당_ calloc()" << endl << endl;

	int size2 = 3; // 동적 배열이기 때문에 Runtime 시 크기를 입력받을 수 있음.

	int *ptr2 = (int *)calloc(size2, sizeof(int)); // int형 크기를 size 만큼 할당 받고 싶음.
	for (int i = 0; i < 3; i++) {
		cout << ptr2[i] << endl; // 포인터 연산을 통해 연속된 공간이라는 것을 알 수 있음.
								 // 메모리 공간이 "0"으로 자동 초기화 된다.
	}
	cout << endl;

	free(ptr2);
	ptr2 = nullptr; // 메모리 동적 할당에 따른 포인터 초기화.

	return 0;
}
