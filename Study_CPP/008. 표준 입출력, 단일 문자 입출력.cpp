/*


###########################
   입출력 스트림 버퍼
###########################

###############
     입출력
###############

- 프로그램 관점에서 살펴보자.

입력
- 외부의 데이터가 프로그램 안으로 흘러 들어온 것을 뜻한다.
- 대표적인 입력 장치로는 키보드, 마우스, 마이크 등이 있다.

출력
- 프로그램 안에서 밖으로 데이터가 흘러 나가는 것을 뜻한다.
- 대표적인 출력 장치로는 모니터, 프린터, 스피커 등이 있다.


################
     스트림
################

- 프로그램과 키보드, 프로그램과 모니터는 서로 연결되어 있는 상태가 아니다.
- 이러한 장치들을 연결해주는 가상의 통로가 스트림
- 데이터의 이동이 한 방향으로 흐름. (단방향성을 가진다 !!!!)

입력 스트림은 입력만, 출력 스트림은 출력만 가능함.


################################################################################################

#########################
  스트림의 생성과 소멸
#########################

- "cin"과 "cout"을 사용할 때 통로를 만들어 달라는 명령어를 사용하지 않았음.

- console(기본적인 입력: 키보드, 출력: 모니터)은 운영체제가 자동으로 생성한다.
- 콘솔 입출력을 위한 스트림은 프로그램이 실행되면 자동으로 생성되고, 프로그램이 종료되면 자동으로 소멸된다.

- 기본적으로 제공되는 스트림을 "표준 입출력 스트림"이라고 함.

################################################################################################

############
    버퍼
############

- 데이터를 임시로 저장하기 위한 메모리 block
- 데이터의 송신과 수신의 효율성을 위해 필요하다.


################################################################################################

#################################
   표준 입출력 스트림의 종류
#################################

- 표준은 기본적으로 console을 뜻한다.

stdin : 표준 입력 스트림, 기본적으로 키보드 대상
stdout : 표준 출력 스트림, 기본적으로 모니터 대상
stderr : 표준 에러 스트림, 기본적으로 모니터 대상이지만, 다른 것으로 지정할 수 있음.

################################################################################################


#########################
  단일 문자 입출력 함수
#########################


####################################
  단일 문자 출력 putchar(), fputc()
####################################


case 1. putchar
- int 형 데이터를 받아서, int 형을 반환함.

int putchar(int _Charcter);

매개변수 int _Character : 문자가 아스키 코드 표의 정수값이기 때문에...
반환값 int : 문자는 아스키 코드 표의 정수값을 가지기 때문에 int형을 반환한다.

ex. putchar('A'); putchar(65);
- 마찬가지로 "A"가 출력됨.
- stdout 표준 출력 스트림으로 스트림이 고정되어 있음.



case 2. fputc()

int fputc(int _Character, FILE *_Stream);

매개변수 int _Character : 출력할 문자 1개
매개변수 FILE *_Stream : 사용할 스트림을 나타냄.
반환값 int : 성공 시 문자 그대로 반환, 실패 시 EOF(End Of File) 반환

ex. fputc('A', stdout); - stdout 표준 출력 스트림을 통해 모니터에 출력을 해라.


##########################
  putchar() vs. fputc()
##########################

putchar() : 스트림이 고정되어 있음. 표준 출력 스트림 stdout
fputc() : 스트림을 사용자가 지정할 수 있다.

반환값 차이
- 두 함수 모두 호출 성공 시 출력될 문자가 반환된다.
- 실패 시 EOF를 반환한다.



####################################
  단일 문자 입력 getchar(), fgetc()
####################################

case 1. getchar()

int getchar();

반환값 int : 입력 받은 문자의 아스키 코드값.
- 표준 입력 스트림인 stdin으로 스트림이 고정되어 있다.

ex. int ch = getchar();
putchar(ch); // 단일 문자를 입력받고 출력을 함.

만약, 단일문자가 아닌 문자열을 받으면 입력되는 문자열이 잘림.
getchar()는 단일문자만 받으니까...
So, 입력 스트림 버퍼에 값이 남게 되므로 이후에 문제가 발생 수 있다 !!!!
- 특히, "Enter_\n"값도 들어있기 때문에 문자열 처리를 잘 해야함.


case 2. fgetc()

int fgetc(FILE *_Stream);

매개변수 FILE *_Stream : 입력 스트림의 FILE 객체에 대한 포인터
반환값 int : 성공 시 읽어들인 문자, 실패 시 EOF(End Of File) 반환

ex. int ch = fgetc(stdin) // 표준 입력 스트림인 키보드로 입력을 받을 것이다.
- 사용자가 입력 스트림을 지정할 수 있음.

물론, fgetc()도 단일 문자만 입력받기 때문에, "Enter_\n"값 조심해야함 !!!!


##########################
  getchar() vs. fgetc()
##########################

getchar() : 입력 스트림이 고정되어 있음. 표준 입력 스트림 stdin
fgetc() : 입력 스트림을 사용자가 지정할 수 있다.

반환값 차이
- 두 함수 모두 호출 성공 시 입력 스트림으로부터 입력받은 문자를 반환한다.
- 실패 시 EOF를 반환한다.

*/


#include <iostream>

using std::cout;
using std::endl;
using std::cin;

int main(void) {

	cout << "##########################################################################" << endl;
	cout << "### getchar(), putchar()" << endl << endl;

	// getchar()는 문자 하나를 입력 받음.
	// putchar()는 문자 하나를 출력함

	int ch = getchar(); // abcd 입력하면 , abc만 출력, 아직 입력 스트림 버퍼에 "d"와 "Enter_ \n"가 남아있음!!!
	putchar(ch);
	ch = getchar();
	putchar(ch);
	ch = getchar();
	putchar(ch);
	
	
	cout << "##########################################################################" << endl;
	cout << "### fgetc(), fputc()" << endl << endl;
	
	int ch2 = fgetc(stdin); // 단일 문자만 입력 받으니 버퍼에 값이 남을 확률이 높음 !!!!
	fputc(ch2, stdout);

	ch2 = getchar();

	return 0;
}